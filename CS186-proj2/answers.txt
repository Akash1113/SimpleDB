Proj2 Write-up

>>Descriptions
#TupleDesc: Chose to use ArrayList to store all the fields I have. Reason: I need to store an array of fields, which support list operations, and permits null. I also want to manipulate the size. ArrayList also makes iteration easier.
#Tuple: Initialized TupleDesc, Field[] and RecordId objects.
#Catalog: Used a HashMap<tableId,Table>to store tables. Reason: file.getId() provides unique tableId for each table. We need to be able to add a new table and get info about a particular table. Using HashMap with tableId as Key, also makes iterator, and clear operation easy. When reading new files that are not in BuffePool,needs to get tables from catalog. getTables method added.
#BufferPoll: Used a HashMap<hashCode(), Page>to store tables. Reason: hashCode() is a unique identifier for page. The reason of using HashMap is similar to above.
#RecordId, #HeapPageId, #HeapFile
#HeapPage: Converted i into byte, then into bit to located it in header to determine whether coresponding slot is used. After that, getNumEmptySlots was simplified, since we could use isSlotUsed to rule out the used slots.
#SeqScan: Initialized DbIterator i. Reason: Seq Scan is a child of DbIterator, and many of its methods need to return an iterator.

>>Changed API
#Table: Made Table a separate class. Reason: there are specific info(DbFile, name, and primarykey)about a table, we need to store it in catalog. I could have made it similar to TDItem's implementation, but this is easier to built, maintain and test.
#HeapPageIterator, #HeapFileIterator: Made them seperate classes. Reason:These Iterators are not as straight-forward as the others. Also seperate class is easy to built, maintain and test.

>>Missing or incomplete elements of your code
Passed all tests for now. Might change structures later for proj2~4 when taking concurrency into account.

>>Who worked on what
It's all me for proj1. Need to find a partner for the rest of the course.

>>Time&Difficulty
Spent roughly 24 hours on this project. My partner was kicked out of the waitinglist. 
The delimma of using hashcode or other unique ids we could use.
Since I forgot java is extremely strict with variable types,using 8 instead of 8.0 gave me bug,though I fixed it.
NullpointerException gives me trouble, since null is allowed in many cases, and they need to be taken care of.
The jumpstar of using java is bit challenging, since I haven't used it for a long, so Bit Operation, RandomAccess, and the handling of Exceptions are confusing at first.



#Join: use simple nested loop, use ArrayList to store qualified tuples, Initialize this ArrayList of Tuples in the open() method. This data structure makes it easier to do fetchNext(), and rewind().